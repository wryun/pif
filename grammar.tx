Program: Block;
Block: paragraphs*=Paragraph;
Paragraph: /(?m)\n*/ lines+=Line /(?m)\n*/;
Line: assignment=Assignment? ( sentence=Sentence | statement=If | statement=While | statement=For ) /(?m)\n/;
Sentence: instructions+=Instruction;
Instruction: Pushable | '.';
Assignment: var=MyID '=';

Pushable: function=Function | var=MyID | rawval=RawVal | expr=WrappedExpression;
If: 'if' condition=Sentence 'do' block=Block ('elif' elif_conditions=Sentence 'do' elif_blocks=Block)* ('else' else_block=Block)? 'end';
While: 'while' condition=Sentence 'do' block=Block 'end';
For: 'for' (var=MyID 'in')? sentence=Sentence 'do' block=Block 'end';

Function: 'func' args=Types block=Block 'end';
WrappedExpression: '((' e=Expression0 '))';
Types: '(' varsWithType*=VarWithType ')';
VarWithType: name=MyID type=MyID;

Keyword: 'end' | 'func' | 'if' | 'while' | 'for' | 'do' | 'else' | 'elif' | 'List' | 'Dict';
MyID: !Keyword ID;

RawVal: FLOAT | STRING | List | Dict;
List: 'List[' (sentences=Sentence /(?m),?\n*/)* ']';
Dict: 'Dict[' (keys=Sentence '=' values=Sentence /(?m),?\n*/)* ']';

Expression0: expr=Expression1 (ops=Operators0 exprs=Expression1)*;
Operators0: '==' | '<=' | '>=' | '<' | '>' | '!=';
Expression1: expr=Expression2 (ops=Operators1 exprs=Expression2)*;
Operators1: '+' | '-';
Expression2: expr=Value (ops=Operators2 exprs=Value)*;
Operators2: '*' | '/';
Value: id=ID | num=FLOAT | ('(' expr=Expression0 ')');
